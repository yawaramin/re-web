parameters:
  cache_key: esy.lock/index.json

# The cache key is built up of the following:
# We use a string that we can change to bust the cache
# The string "esy"
# The string for the OS
# The hash of the lock file
steps:
  - bash: |
      # COMPUTE THE ESY INSTALL CACHE LOCATION AHEAD OF TIME
      DESIRED_LEN="85"
      HOME_ESY3="$HOME/.esy/3"
      HOME_ESY3_LEN=${#HOME_ESY3}
      NUM_UNDERS=$(echo "$(($DESIRED_LEN-$HOME_ESY3_LEN))")
      UNDERS=$(printf "%-${NUM_UNDERS}s" "_")
      UNDERS="${UNDERS// /_}"
      THE_ESY__CACHE_INSTALL_PATH=${HOME_ESY3}${UNDERS}/i
      if [ "$AGENT_OS" == "Windows_NT" ]; then
        THE_ESY__CACHE_INSTALL_PATH=$( cygpath --mixed --absolute "$THE_ESY__CACHE_INSTALL_PATH")
      fi
      echo "THE_ESY__CACHE_INSTALL_PATH: $THE_ESY__CACHE_INSTALL_PATH"
      # This will be exposed as an env var ESY__CACHE_INSTALL_PATH, or an
      # Azure var esy__cache_install_path
      echo "##vso[task.setvariable variable=esy__cache_install_path]$THE_ESY__CACHE_INSTALL_PATH"
    displayName: '[Cache] calculate esy store path'
      
  - task: CacheBeta@1
    inputs:
      key: test_calculate_cache | esy | $(Agent.OS) | ${{ parameters.cache_key }} 
      path: $(CACHE_FOLDER)
      cacheHitVar: CACHE_RESTORED
    displayName: '[Cache] esy packages'

  - script: 'mkdir -p $(ESY__CACHE_INSTALL_PATH)'
    condition: eq(variables.CACHE_RESTORED, 'true')
    displayName: '[Cache][Restore] Create esy cache directory'

  - script: 'mv $(CACHE_FOLDER)/* $(ESY__CACHE_INSTALL_PATH)'
    displayName: '[Cache][Restore] Move downloaded cache in place'
    condition: eq(variables.CACHE_RESTORED, 'true')

